// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package ports

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// PortsServiceClient is the client API for PortsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type PortsServiceClient interface {
	// Sends a greeting
	Upsert(ctx context.Context, in *PortProto, opts ...grpc.CallOption) (*UpsertResponse, error)
	List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (PortsService_ListClient, error)
	FindByKey(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error)
}

type portsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewPortsServiceClient(cc grpc.ClientConnInterface) PortsServiceClient {
	return &portsServiceClient{cc}
}

func (c *portsServiceClient) Upsert(ctx context.Context, in *PortProto, opts ...grpc.CallOption) (*UpsertResponse, error) {
	out := new(UpsertResponse)
	err := c.cc.Invoke(ctx, "/PortsService/Upsert", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *portsServiceClient) List(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (PortsService_ListClient, error) {
	stream, err := c.cc.NewStream(ctx, &PortsService_ServiceDesc.Streams[0], "/PortsService/List", opts...)
	if err != nil {
		return nil, err
	}
	x := &portsServiceListClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type PortsService_ListClient interface {
	Recv() (*PortProto, error)
	grpc.ClientStream
}

type portsServiceListClient struct {
	grpc.ClientStream
}

func (x *portsServiceListClient) Recv() (*PortProto, error) {
	m := new(PortProto)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *portsServiceClient) FindByKey(ctx context.Context, in *FindRequest, opts ...grpc.CallOption) (*FindResponse, error) {
	out := new(FindResponse)
	err := c.cc.Invoke(ctx, "/PortsService/FindByKey", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// PortsServiceServer is the server API for PortsService service.
// All implementations must embed UnimplementedPortsServiceServer
// for forward compatibility
type PortsServiceServer interface {
	// Sends a greeting
	Upsert(context.Context, *PortProto) (*UpsertResponse, error)
	List(*ListRequest, PortsService_ListServer) error
	FindByKey(context.Context, *FindRequest) (*FindResponse, error)
	mustEmbedUnimplementedPortsServiceServer()
}

// UnimplementedPortsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedPortsServiceServer struct {
}

func (UnimplementedPortsServiceServer) Upsert(context.Context, *PortProto) (*UpsertResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Upsert not implemented")
}
func (UnimplementedPortsServiceServer) List(*ListRequest, PortsService_ListServer) error {
	return status.Errorf(codes.Unimplemented, "method List not implemented")
}
func (UnimplementedPortsServiceServer) FindByKey(context.Context, *FindRequest) (*FindResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FindByKey not implemented")
}
func (UnimplementedPortsServiceServer) mustEmbedUnimplementedPortsServiceServer() {}

// UnsafePortsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to PortsServiceServer will
// result in compilation errors.
type UnsafePortsServiceServer interface {
	mustEmbedUnimplementedPortsServiceServer()
}

func RegisterPortsServiceServer(s grpc.ServiceRegistrar, srv PortsServiceServer) {
	s.RegisterService(&PortsService_ServiceDesc, srv)
}

func _PortsService_Upsert_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(PortProto)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortsServiceServer).Upsert(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PortsService/Upsert",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortsServiceServer).Upsert(ctx, req.(*PortProto))
	}
	return interceptor(ctx, in, info, handler)
}

func _PortsService_List_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PortsServiceServer).List(m, &portsServiceListServer{stream})
}

type PortsService_ListServer interface {
	Send(*PortProto) error
	grpc.ServerStream
}

type portsServiceListServer struct {
	grpc.ServerStream
}

func (x *portsServiceListServer) Send(m *PortProto) error {
	return x.ServerStream.SendMsg(m)
}

func _PortsService_FindByKey_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FindRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PortsServiceServer).FindByKey(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/PortsService/FindByKey",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PortsServiceServer).FindByKey(ctx, req.(*FindRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// PortsService_ServiceDesc is the grpc.ServiceDesc for PortsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var PortsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "PortsService",
	HandlerType: (*PortsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Upsert",
			Handler:    _PortsService_Upsert_Handler,
		},
		{
			MethodName: "FindByKey",
			Handler:    _PortsService_FindByKey_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "List",
			Handler:       _PortsService_List_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "ports.proto",
}
